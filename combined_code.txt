===== ./build.gradle =====
plugins {
    id 'org.springframework.boot' version '3.1.5' apply false
    id 'io.spring.dependency-management' version '1.1.3' apply false
    id 'java'
}

allprojects {
    group = 'com.ing'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
}

subprojects {
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

        implementation 'org.slf4j:slf4j-api'
    }

    test {
        useJUnitPlatform()
    }
}===== ./infrastructure/build.gradle =====
plugins {
    id 'org.springframework.boot'
}

dependencies {
    implementation project(':domain')

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

bootJar {
    enabled = true
}===== ./infrastructure/build/resources/main/application.yaml =====
jwt:
  secret: "ing-bank-8f3fa72b8dfc9d2e1f5765a0d2c8b162fc9d2e1f5765a0d2c8b162f"
  expiration: 3600000

spring:
  datasource:
    url: jdbc:h2:mem:ing
    driver-class-name: org.h2.Driver
    username: sa
  h2:
    console:
      enabled: true===== ./infrastructure/src/test/java/com/ing/CancelOrderIT.java =====
package com.ing;

public class CancelOrderIT {

}
===== ./infrastructure/src/main/resources/application.yaml =====
jwt:
  secret: "ing-bank-8f3fa72b8dfc9d2e1f5765a0d2c8b162fc9d2e1f5765a0d2c8b162f"
  expiration: 3600000

spring:
  datasource:
    url: jdbc:h2:mem:ing
    driver-class-name: org.h2.Driver
    username: sa
  h2:
    console:
      enabled: true===== ./infrastructure/src/main/java/com/ing/OrderApiApplication.java =====
package com.ing;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class OrderApiApplication {
    public static void main(String[] args) {
        SpringApplication.run(OrderApiApplication.class, args);
    }
}===== ./infrastructure/src/main/java/com/ing/config/DomainConfig.java =====
package com.ing.config;

import com.ing.asset.handler.ListAssetsHandler;
import com.ing.asset.port.AssetPort;
import com.ing.order.handler.CancelOrderHandler;
import com.ing.order.handler.CreateOrderHandler;
import com.ing.asset.handler.DepositMoneyHandler;
import com.ing.order.handler.ListOrdersHandler;
import com.ing.asset.handler.WithdrawMoneyHandler;
import com.ing.order.port.OrderPort;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class DomainConfig {

    @Bean
    public CreateOrderHandler createOrderHandler(OrderPort orderPort, AssetPort assetPort) {
        return new CreateOrderHandler(assetPort, orderPort);
    }

    @Bean
    public ListOrdersHandler listOrdersHandler(OrderPort orderPort) {
        return new ListOrdersHandler(orderPort);
    }

    @Bean
    public CancelOrderHandler cancelOrderHandler(OrderPort orderPort, AssetPort assetPort) {
        return new CancelOrderHandler(orderPort, assetPort);
    }

    @Bean
    public DepositMoneyHandler depositMoneyHandler(AssetPort assetPort) {
        return new DepositMoneyHandler(assetPort);
    }

    @Bean
    public WithdrawMoneyHandler withdrawMoneyHandler(AssetPort assetPort) {
        return new WithdrawMoneyHandler(assetPort);
    }

    @Bean
    public ListAssetsHandler listAssetsHandler(AssetPort assetPort) {
        return new ListAssetsHandler(assetPort);
    }
}===== ./infrastructure/src/main/java/com/ing/adapters/order/jpa/repository/OrderJpaRepository.java =====
package com.ing.adapters.order.jpa.repository;

import com.ing.adapters.order.jpa.entity.OrderEntity;
import org.springframework.data.jpa.repository.JpaRepository;

import java.time.LocalDateTime;
import java.util.List;

public interface OrderJpaRepository extends JpaRepository<OrderEntity, Long> {

    List<OrderEntity> findByCustomerIdAndCreateDateBetween(String customerId, LocalDateTime startDate,
        LocalDateTime endDate);

}===== ./infrastructure/src/main/java/com/ing/adapters/order/jpa/entity/OrderEntity.java =====
package com.ing.adapters.order.jpa.entity;

import com.ing.order.model.Order;
import jakarta.persistence.*;
import lombok.Data;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "orders")
@Data
public class OrderEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String customerId;

    @Column(nullable = false)
    private String assetName;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Order.OrderSide side;

    @Column(nullable = false)
    private BigDecimal size;

    @Column(nullable = false)
    private BigDecimal price;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Order.OrderStatus status;

    @Column(nullable = false)
    private LocalDateTime createDate;
}===== ./infrastructure/src/main/java/com/ing/adapters/order/jpa/OrderAdapter.java =====
package com.ing.adapters.order.jpa;

import com.ing.adapters.order.jpa.entity.OrderEntity;
import com.ing.adapters.order.jpa.repository.OrderJpaRepository;
import com.ing.order.model.Order;
import com.ing.order.port.OrderPort;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Component
public class OrderAdapter implements OrderPort {

    private final OrderJpaRepository orderJpaRepository;

    public OrderAdapter(OrderJpaRepository orderJpaRepository) {
        this.orderJpaRepository = orderJpaRepository;
    }

    @Override
    public Order save(Order order) {
        OrderEntity orderEntity = toEntity(order);
        OrderEntity savedEntity = orderJpaRepository.save(orderEntity);
        return toModel(savedEntity);
    }

    @Override
    public Optional<Order> findById(String id) {
        return orderJpaRepository.findById(Long.valueOf(id))
            .map(this::toModel);
    }

    @Override
    public List<Order> findByCustomerIdAndDateRange(String customerId, LocalDateTime startDate, LocalDateTime endDate) {
        return orderJpaRepository.findByCustomerIdAndCreateDateBetween(customerId, startDate, endDate).stream()
            .map(this::toModel)
            .collect(Collectors.toList());
    }

    @Override
    public void deleteById(String id) {
        orderJpaRepository.deleteById(Long.valueOf(id));
    }

    private OrderEntity toEntity(Order order) {
        OrderEntity entity = new OrderEntity();
        entity.setCustomerId(order.getCustomerId());
        entity.setAssetName(order.getAssetName());
        entity.setSide(order.getSide());
        entity.setSize(order.getSize());
        entity.setPrice(order.getPrice());
        entity.setStatus(order.getStatus());
        entity.setCreateDate(order.getCreateDate());
        return entity;
    }

    private Order toModel(OrderEntity entity) {
        Order order = new Order(
            entity.getCustomerId(),
            entity.getAssetName(),
            entity.getSide(),
            entity.getSize(),
            entity.getPrice()
        );
        order.setId(entity.getId().toString());
        order.setStatus(entity.getStatus());
        return order;
    }
}===== ./infrastructure/src/main/java/com/ing/adapters/order/rest/dto/ListOrdersRequest.java =====
package com.ing.adapters.order.rest.dto;

import java.time.LocalDateTime;

import com.ing.order.command.ListOrdersCommand;

public record ListOrdersRequest(
    String customerId,
    LocalDateTime startDate,
    LocalDateTime endDate
) {

    public ListOrdersCommand toModel() {
        return ListOrdersCommand.builder()
            .customerId(customerId)
            .startDate(startDate)
            .endDate(endDate)
            .build();
    }

}===== ./infrastructure/src/main/java/com/ing/adapters/order/rest/dto/OrderResponse.java =====
package com.ing.adapters.order.rest.dto;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import com.ing.order.model.Order;

public record OrderResponse(
    String id,
    String customerId,
    String assetName,
    Order.OrderSide side,
    BigDecimal size,
    BigDecimal price,
    Order.OrderStatus status,
    LocalDateTime createDate
) {

    public static OrderResponse fromModel(Order order) {
        return new OrderResponse(
            order.getId(),
            order.getCustomerId(),
            order.getAssetName(),
            order.getSide(),
            order.getSize(),
            order.getPrice(),
            order.getStatus(),
            order.getCreateDate()
        );
    }

}===== ./infrastructure/src/main/java/com/ing/adapters/order/rest/dto/CancelOrderRequest.java =====
package com.ing.adapters.order.rest.dto;

import com.ing.order.command.CancelOrderCommand;

public record CancelOrderRequest(
    String orderId,
    String customerId
) {

    public CancelOrderCommand toModel() {
        return CancelOrderCommand.builder()
            .orderId(orderId)
            .customerId(customerId)
            .build();
    }

}===== ./infrastructure/src/main/java/com/ing/adapters/order/rest/dto/CreateOrderRequest.java =====
package com.ing.adapters.order.rest.dto;

import java.math.BigDecimal;

import com.ing.order.command.CreateOrderCommand;
import com.ing.order.model.Order;

public record CreateOrderRequest(
    String customerId,
    String assetName,
    Order.OrderSide side,
    BigDecimal size,
    BigDecimal price
) {

    public CreateOrderCommand toModel() {
        return CreateOrderCommand.builder()
            .customerId(customerId)
            .assetName(assetName)
            .side(side)
            .size(size)
            .price(price)
            .build();
    }

}===== ./infrastructure/src/main/java/com/ing/adapters/order/rest/OrderController.java =====
package com.ing.adapters.order.rest;

import com.ing.adapters.order.rest.dto.CancelOrderRequest;
import com.ing.adapters.order.rest.dto.CreateOrderRequest;
import com.ing.adapters.order.rest.dto.ListOrdersRequest;
import com.ing.adapters.order.rest.dto.OrderResponse;
import com.ing.order.handler.CancelOrderHandler;
import com.ing.order.handler.CreateOrderHandler;
import com.ing.order.handler.ListOrdersHandler;
import com.ing.order.model.Order;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/orders")
@RequiredArgsConstructor
public class OrderController {

    private final CreateOrderHandler createOrderHandler;
    private final ListOrdersHandler listOrdersHandler;
    private final CancelOrderHandler cancelOrderHandler;

    @PostMapping
    public ResponseEntity<OrderResponse> createOrder(@RequestBody CreateOrderRequest request) {
        Order order = createOrderHandler.handle(request.toModel());
        return new ResponseEntity<>(OrderResponse.fromModel(order), HttpStatus.CREATED);
    }

    @GetMapping
    public ResponseEntity<List<OrderResponse>> listOrders(ListOrdersRequest request) {

        List<Order> orders = listOrdersHandler.handle(request.toModel());

        List<OrderResponse> orderResponses = orders.stream()
            .map(OrderResponse::fromModel)
            .collect(Collectors.toList());

        return ResponseEntity.ok(orderResponses);
    }

    @DeleteMapping("/{orderId}")
    public ResponseEntity<Void> cancelOrder(@PathVariable String orderId, @RequestParam String customerId) {
        CancelOrderRequest request = new CancelOrderRequest(orderId, customerId);

        cancelOrderHandler.handle(request.toModel());

        return ResponseEntity.noContent().build();
    }
}===== ./infrastructure/src/main/java/com/ing/adapters/asset/jpa/repository/AssetJpaRepository.java =====
package com.ing.adapters.asset.jpa.repository;

import com.ing.adapters.asset.jpa.entity.AssetEntity;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;
import java.util.Optional;

public interface AssetJpaRepository extends JpaRepository<AssetEntity, Long> {

    Optional<AssetEntity> findByCustomerIdAndAssetName(String customerId, String assetName);

    List<AssetEntity> findAllByCustomerId(String customerId);

}===== ./infrastructure/src/main/java/com/ing/adapters/asset/jpa/entity/AssetEntity.java =====
package com.ing.adapters.asset.jpa.entity;

import jakarta.persistence.*;
import lombok.Data;

import java.math.BigDecimal;

@Entity
@Table(name = "assets")
@Data
public class AssetEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String customerId;

    @Column(nullable = false)
    private String assetName;

    @Column(nullable = false)
    private BigDecimal size;

    @Column(nullable = false)
    private BigDecimal usableSize;
}===== ./infrastructure/src/main/java/com/ing/adapters/asset/jpa/AssetAdapter.java =====
package com.ing.adapters.asset.jpa;

import com.ing.adapters.asset.jpa.entity.AssetEntity;
import com.ing.adapters.asset.jpa.repository.AssetJpaRepository;
import com.ing.asset.model.Asset;
import com.ing.asset.port.AssetPort;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Component
public class AssetAdapter implements AssetPort {

    private final AssetJpaRepository assetJpaRepository;

    public AssetAdapter(AssetJpaRepository assetJpaRepository) {
        this.assetJpaRepository = assetJpaRepository;
    }

    @Override
    public Asset save(Asset asset) {
        AssetEntity assetEntity = toEntity(asset);
        AssetEntity savedEntity = assetJpaRepository.save(assetEntity);
        return toModel(savedEntity);
    }

    @Override
    public Optional<Asset> findByCustomerIdAndAssetName(String customerId, String assetName) {
        return assetJpaRepository.findByCustomerIdAndAssetName(customerId, assetName)
            .map(this::toModel);
    }

    @Override
    public List<Asset> findAllByCustomerId(String customerId) {
        return assetJpaRepository.findAllByCustomerId(customerId).stream()
            .map(this::toModel)
            .collect(Collectors.toList());
    }

    private AssetEntity toEntity(Asset asset) {
        AssetEntity entity = new AssetEntity();
        entity.setCustomerId(asset.getCustomerId());
        entity.setAssetName(asset.getAssetName());
        entity.setSize(asset.getSize());
        entity.setUsableSize(asset.getUsableSize());
        return entity;
    }

    private Asset toModel(AssetEntity entity) {
        return new Asset(
            entity.getCustomerId(),
            entity.getAssetName(),
            entity.getSize(),
            entity.getUsableSize()
        );
    }
}===== ./infrastructure/src/main/java/com/ing/adapters/asset/rest/dto/DepositMoneyRequest.java =====
package com.ing.adapters.asset.rest.dto;

import java.math.BigDecimal;

import com.ing.asset.command.DepositMoneyCommand;

public record DepositMoneyRequest(
    String customerId,
    BigDecimal amount
) {

    public DepositMoneyCommand toModel() {
        return DepositMoneyCommand.builder()
            .customerId(customerId)
            .amount(amount)
            .build();
    }

}===== ./infrastructure/src/main/java/com/ing/adapters/asset/rest/dto/WithdrawMoneyRequest.java =====
package com.ing.adapters.asset.rest.dto;

import java.math.BigDecimal;

import com.ing.asset.command.WithdrawMoneyCommand;

public record WithdrawMoneyRequest(
    String customerId,
    BigDecimal amount,
    String iban
) {

    public WithdrawMoneyCommand toModel() {
        return WithdrawMoneyCommand.builder()
            .customerId(customerId)
            .amount(amount)
            .iban(iban)
            .build();
    }

}===== ./infrastructure/src/main/java/com/ing/adapters/asset/rest/dto/ListAssetsRequest.java =====
package com.ing.adapters.asset.rest.dto;

import com.ing.asset.command.ListAssetsCommand;

public record ListAssetsRequest(
    String customerId
) {

    public ListAssetsCommand toModel() {
        return ListAssetsCommand.builder()
            .customerId(customerId)
            .build();
    }

}===== ./infrastructure/src/main/java/com/ing/adapters/asset/rest/dto/AssetResponse.java =====
package com.ing.adapters.asset.rest.dto;

import java.math.BigDecimal;

import com.ing.asset.model.Asset;

public record AssetResponse(
    String customerId,
    String assetName,
    BigDecimal size,
    BigDecimal usableSize
) {

    public static AssetResponse fromModel(Asset asset) {
        return new AssetResponse(
            asset.getCustomerId(),
            asset.getAssetName(),
            asset.getSize(),
            asset.getUsableSize()
        );
    }

}===== ./infrastructure/src/main/java/com/ing/adapters/asset/rest/AssetController.java =====
package com.ing.adapters.asset.rest;

import com.ing.adapters.asset.rest.dto.AssetResponse;
import com.ing.adapters.asset.rest.dto.DepositMoneyRequest;
import com.ing.adapters.asset.rest.dto.ListAssetsRequest;
import com.ing.adapters.asset.rest.dto.WithdrawMoneyRequest;
import com.ing.asset.handler.DepositMoneyHandler;
import com.ing.asset.handler.ListAssetsHandler;
import com.ing.asset.handler.WithdrawMoneyHandler;
import com.ing.asset.model.Asset;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/assets")
@RequiredArgsConstructor
public class AssetController {

    private final DepositMoneyHandler depositMoneyHandler;
    private final WithdrawMoneyHandler withdrawMoneyHandler;
    private final ListAssetsHandler listAssetsHandler;

    @PostMapping("/deposit")
    public ResponseEntity<Void> depositMoney(@RequestBody DepositMoneyRequest request) {

        depositMoneyHandler.handle(request.toModel());

        return new ResponseEntity<>(HttpStatus.OK);
    }

    @PostMapping("/withdraw")
    public ResponseEntity<Void> withdrawMoney(@RequestBody WithdrawMoneyRequest request) {

        withdrawMoneyHandler.handle(request.toModel());

        return new ResponseEntity<>(HttpStatus.OK);
    }

    @GetMapping
    public ResponseEntity<List<AssetResponse>> listAssets(@RequestBody ListAssetsRequest request) {

        List<Asset> assets = listAssetsHandler.handle(request.toModel());

        List<AssetResponse> assetResponses = assets.stream()
            .map(AssetResponse::fromModel)
            .collect(Collectors.toList());

        return ResponseEntity.ok(assetResponses);
    }
}===== ./infrastructure/src/main/java/com/ing/adapters/user/UserAdapter.java =====
package com.ing.adapters.user;

import com.ing.adapters.user.entity.UserEntity;
import com.ing.adapters.user.jpa.UserJpaRepository;
import com.ing.user.model.User;
import com.ing.user.port.UserPort;
import org.springframework.stereotype.Component;

import java.util.Optional;

@Component
public class UserAdapter implements UserPort {

    private final UserJpaRepository userJpaRepository;

    public UserAdapter(UserJpaRepository userJpaRepository) {
        this.userJpaRepository = userJpaRepository;
    }

    @Override
    public Optional<User> findById(String id) {
        return userJpaRepository.findById(id).map(this::toUser);
    }

    @Override
    public Optional<User> findByUsername(String username) {
        return userJpaRepository.findByUsername(username).map(this::toUser);
    }

    @Override
    public User save(User user) {
        UserEntity entity = toUserEntity(user);
        UserEntity savedEntity = userJpaRepository.save(entity);
        return toUser(savedEntity);
    }

    private User toUser(UserEntity entity) {
        return new User(entity.getId(), entity.getUsername(), entity.getPassword(), entity.getUserType());
    }

    private UserEntity toUserEntity(User user) {
        UserEntity entity = new UserEntity();
        entity.setId(user.getId());
        entity.setUsername(user.getUsername());
        entity.setPassword(user.getPassword());
        entity.setUserType(user.getUserType());
        return entity;
    }
}===== ./infrastructure/src/main/java/com/ing/adapters/user/entity/UserEntity.java =====
package com.ing.adapters.user.entity;

import com.ing.user.model.User;
import jakarta.persistence.*;
import lombok.Data;

@Entity
@Table(name = "users")
@Data
public class UserEntity {
    @Id
    private String id;

    @Column(nullable = false, unique = true)
    private String username;

    @Column(nullable = false)
    private String password;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private User.UserType userType;
}===== ./infrastructure/src/main/java/com/ing/adapters/user/jpa/UserJpaRepository.java =====
package com.ing.adapters.user.jpa;

import com.ing.adapters.user.entity.UserEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface UserJpaRepository extends JpaRepository<UserEntity, String> {

    Optional<UserEntity> findByUsername(String username);

}===== ./infrastructure/src/main/java/com/ing/exception/GlobalExceptionHandler.java =====
package com.ing.exception;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@Slf4j
@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<String> handleIllegalArgumentException(IllegalArgumentException ex) {
        return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(IllegalStateException.class)
    public ResponseEntity<String> handleIllegalStateException(IllegalStateException ex) {
        return new ResponseEntity<>(ex.getMessage(), HttpStatus.CONFLICT);
    }

    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<?> handleBadCredentialsException(BadCredentialsException ex) {
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid username or password");
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleGenericException(Exception ex) {
        log.error("Exception occurred!", ex);

        return new ResponseEntity<>(ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
    }
}===== ./infrastructure/src/main/java/com/ing/authentication/dto/RegisterRequest.java =====
package com.ing.authentication.dto;

public record RegisterRequest(
        String username,
        String password
) {}===== ./infrastructure/src/main/java/com/ing/authentication/dto/AuthenticationResponse.java =====
package com.ing.authentication.dto;

public record AuthenticationResponse(
        String token
) {}===== ./infrastructure/src/main/java/com/ing/authentication/dto/LoginRequest.java =====
package com.ing.authentication.dto;

public record LoginRequest(
        String username,
        String password
) {}===== ./infrastructure/src/main/java/com/ing/authentication/util/JwtUtil.java =====
package com.ing.authentication.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secret;

    @Value("${jwt.expiration}")
    private Long expiration;

    private Key SECRET_KEY;

    @PostConstruct
    public void init() {
        if (secret.length() < 64) {
            throw new IllegalArgumentException("JWT secret must be at least 512 bits (64 bytes) in length.");
        }

        this.SECRET_KEY = Keys.hmacShaKeyFor(secret.getBytes());
    }

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(SECRET_KEY)
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    private Boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    public String generateToken(Authentication authentication) {
        String username = authentication.getName();

        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                .signWith(SECRET_KEY, SignatureAlgorithm.HS512)
                .compact();
    }

    public Boolean validateToken(String token, String username) {
        final String usernameInToken = extractUsername(token);
        return (usernameInToken.equals(username) && !isTokenExpired(token));
    }
}===== ./infrastructure/src/main/java/com/ing/authentication/config/SecurityConfig.java =====
package com.ing.authentication.config;

import com.ing.authentication.filter.JwtAuthenticationFilter;
import org.springframework.boot.autoconfigure.security.servlet.PathRequest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {
    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    private final UserDetailsService userDetailsService;

    public SecurityConfig(JwtAuthenticationFilter jwtAuthenticationFilter, UserDetailsService userDetailsService) {
        this.jwtAuthenticationFilter = jwtAuthenticationFilter;
        this.userDetailsService = userDetailsService;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers(PathRequest.toH2Console()).permitAll()
                        .requestMatchers(AntPathRequestMatcher.antMatcher("/api/auth/**")).permitAll()
                        .anyRequest().authenticated()
                )
                .sessionManagement(session -> session
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                )
                .headers(headers -> headers
                        .frameOptions(HeadersConfigurer.FrameOptionsConfig::sameOrigin)
                )
                .authenticationProvider(authenticationProvider())
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}===== ./infrastructure/src/main/java/com/ing/authentication/controller/AuthenticationController.java =====
package com.ing.authentication.controller;

import com.ing.authentication.dto.AuthenticationResponse;
import com.ing.authentication.dto.LoginRequest;
import com.ing.authentication.dto.RegisterRequest;
import com.ing.authentication.util.JwtUtil;
import com.ing.user.model.User;
import com.ing.user.port.UserPort;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.UUID;

@RestController
@RequestMapping("/api/auth")
public class AuthenticationController {

    private final AuthenticationManager authenticationManager;
    private final UserPort userPort;
    private final PasswordEncoder passwordEncoder;
    private final JwtUtil jwtUtil;

    public AuthenticationController(AuthenticationManager authenticationManager,
                                    UserPort userPort,
                                    PasswordEncoder passwordEncoder,
                                    JwtUtil jwtUtil) {
        this.authenticationManager = authenticationManager;
        this.userPort = userPort;
        this.passwordEncoder = passwordEncoder;
        this.jwtUtil = jwtUtil;
    }

    @PostMapping("/login")
    public ResponseEntity<?> authenticateUser(@RequestBody LoginRequest loginRequest) {
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginRequest.username(), loginRequest.password())
        );

        final String jwt = jwtUtil.generateToken(authentication);

        return ResponseEntity.ok(new AuthenticationResponse(jwt));
    }

    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@RequestBody RegisterRequest registrationRequest) {
        if (userPort.findByUsername(registrationRequest.username()).isPresent()) {
            return ResponseEntity.badRequest().body("Username is already taken!");
        }

        User user = new User(
                UUID.randomUUID().toString(),
                registrationRequest.username(),
                passwordEncoder.encode(registrationRequest.password()),
                User.UserType.CUSTOMER
        );

        userPort.save(user);

        return ResponseEntity.ok("Registration successful. Please log in with your credentials.");
    }
}===== ./infrastructure/src/main/java/com/ing/authentication/filter/JwtAuthenticationFilter.java =====
package com.ing.authentication.filter;

import com.ing.authentication.util.JwtUtil;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtUtil jwtUtil;
    private final UserDetailsService userDetailsService;

    public JwtAuthenticationFilter(JwtUtil jwtUtil, UserDetailsService userDetailsService) {
        this.jwtUtil = jwtUtil;
        this.userDetailsService = userDetailsService;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws ServletException, IOException {
        final String authorizationHeader = request.getHeader("Authorization");

        String username = null;
        String jwt = null;

        if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
            jwt = authorizationHeader.substring(7);
            username = jwtUtil.extractUsername(jwt);
        }

        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);

            if (jwtUtil.validateToken(jwt, userDetails.getUsername())) {

                UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =
                        new UsernamePasswordAuthenticationToken(
                                userDetails,
                                null,
                                userDetails.getAuthorities()
                        );

                usernamePasswordAuthenticationToken
                        .setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
            }
        }

        chain.doFilter(request, response);
    }
}===== ./infrastructure/src/main/java/com/ing/authentication/service/CustomUserDetailsService.java =====
package com.ing.authentication.service;

import com.ing.user.model.User;
import com.ing.user.port.UserPort;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Collections;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final UserPort userRepositoryPort;

    public CustomUserDetailsService(UserPort userRepositoryPort) {
        this.userRepositoryPort = userRepositoryPort;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepositoryPort.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with username: " + username));

        return new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPassword(),
                Collections.singletonList(new SimpleGrantedAuthority(user.getUserType().name()))
        );
    }
}===== ./settings.gradle =====
rootProject.name = 'ing-order-api'

include 'domain', 'infrastructure'===== ./domain/build.gradle =====
plugins {
    id 'java-library'
}

jar {
    enabled = true
}===== ./domain/src/test/java/com/ing/CancelOrderTest.java =====
package com.ing;

public class CancelOrderTest {

}
===== ./domain/src/main/java/com/ing/order/handler/CancelOrderHandler.java =====
package com.ing.order.handler;

import com.ing.asset.model.Asset;
import com.ing.asset.port.AssetPort;
import com.ing.order.command.CancelOrderCommand;
import com.ing.order.model.Order;
import com.ing.order.port.OrderPort;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
public class CancelOrderHandler {

    private final OrderPort orderRepository;

    private final AssetPort assetRepository;

    public void handle(CancelOrderCommand command) {

        Order order = orderRepository.findById(command.getOrderId())
            .orElseThrow(() -> new IllegalArgumentException("Order not found"));

        if (order.getStatus() != Order.OrderStatus.PENDING) {
            throw new IllegalStateException("Only pending orders can be canceled");
        }

        if (!order.getCustomerId().equals(command.getCustomerId())) {
            throw new IllegalArgumentException("Order does not belong to the specified customer");
        }

        order.setStatus(Order.OrderStatus.CANCELED);
        orderRepository.save(order);

        // Return the reserved amount to the customer's asset
        Asset asset = order.getSide() == Order.OrderSide.SELL ?
            assetRepository.findByCustomerIdAndAssetName(order.getCustomerId(), order.getAssetName()).orElseThrow() :
            assetRepository.findByCustomerIdAndAssetName(order.getCustomerId(), "TRY").orElseThrow();

        asset.incrementSize(
            order.getSide() == Order.OrderSide.SELL ? order.getSize() : order.getSize().multiply(order.getPrice())
        );

        assetRepository.save(asset);

        log.info("Order {} canceled for customer {}", command.getOrderId(), command.getCustomerId());
    }

}===== ./domain/src/main/java/com/ing/order/handler/CreateOrderHandler.java =====
package com.ing.order.handler;

import com.ing.asset.model.Asset;
import com.ing.asset.port.AssetPort;
import com.ing.order.command.CreateOrderCommand;
import com.ing.order.model.Order;
import com.ing.order.port.OrderPort;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.math.BigDecimal;

@Slf4j
@RequiredArgsConstructor
public class CreateOrderHandler {

    private final AssetPort assetRepository;

    private final OrderPort orderRepository;

    public Order handle(CreateOrderCommand useCase) {

        Asset asset;

        if (useCase.getSide() == Order.OrderSide.SELL) {
            asset = assetRepository.findByCustomerIdAndAssetName(useCase.getCustomerId(), useCase.getAssetName())
                .orElseThrow(() -> new IllegalArgumentException("Insufficient asset balance"));
        } else {
            asset = assetRepository.findByCustomerIdAndAssetName(useCase.getCustomerId(), "TRY")
                .orElseThrow(() -> new IllegalArgumentException("Insufficient TRY balance"));
        }

        BigDecimal requiredAmount = useCase.getSide() == Order.OrderSide.SELL ?
            useCase.getSize() :
            useCase.getSize().multiply(useCase.getPrice());

        if (asset.getUsableSize().compareTo(requiredAmount) < 0) {
            throw new IllegalArgumentException("Insufficient balance");
        }

        asset.decrementSize(requiredAmount);
        assetRepository.save(asset);

        Order order = new Order(useCase.getCustomerId(),
            useCase.getAssetName(),
            useCase.getSide(),
            useCase.getSize(),
            useCase.getPrice()
        );

        Order savedOrder = orderRepository.save(order);

        log.info(
            "Order created: {} {} {} at {} for customer {}",
            useCase.getSide(),
            useCase.getSize(),
            useCase.getAssetName(),
            useCase.getPrice(),
            useCase.getCustomerId()
        );

        return savedOrder;
    }

}===== ./domain/src/main/java/com/ing/order/handler/ListOrdersHandler.java =====
package com.ing.order.handler;

import com.ing.order.command.ListOrdersCommand;
import com.ing.order.model.Order;
import com.ing.order.port.OrderPort;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.util.List;

@Slf4j
@RequiredArgsConstructor
public class ListOrdersHandler {

    private final OrderPort orderRepository;

    public List<Order> handle(ListOrdersCommand command) {

        List<Order> orders = orderRepository.findByCustomerIdAndDateRange(
            command.getCustomerId(), command.getStartDate(), command.getEndDate());

        log.info("Retrieved {} orders for customer {} between {} and {}",
            orders.size(), command.getCustomerId(), command.getStartDate(), command.getEndDate()
        );

        return orders;
    }

}===== ./domain/src/main/java/com/ing/order/model/Order.java =====
package com.ing.order.model;

import lombok.Getter;
import lombok.Setter;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Getter
public class Order {

    @Setter
    private String id;
    private final String customerId;
    private final String assetName;
    private final OrderSide side;
    private final BigDecimal size;
    private final BigDecimal price;
    @Setter
    private OrderStatus status;
    private final LocalDateTime createDate;

    public Order(String customerId, String assetName, OrderSide side, BigDecimal size, BigDecimal price) {
        this.customerId = customerId;
        this.assetName = assetName;
        this.side = side;
        this.size = size;
        this.price = price;
        this.status = OrderStatus.PENDING;
        this.createDate = LocalDateTime.now();
    }

    public enum OrderSide {
        BUY, SELL
    }

    public enum OrderStatus {
        PENDING, MATCHED, CANCELED
    }
}===== ./domain/src/main/java/com/ing/order/command/CreateOrderCommand.java =====
package com.ing.order.command;

import com.ing.common.model.Command;
import com.ing.order.model.Order;
import lombok.Builder;
import lombok.Value;

import java.math.BigDecimal;

@Value
@Builder
public class CreateOrderCommand implements Command {
    String customerId;
    String assetName;
    Order.OrderSide side;
    BigDecimal size;
    BigDecimal price;
}===== ./domain/src/main/java/com/ing/order/command/CancelOrderCommand.java =====
package com.ing.order.command;

import lombok.Builder;
import lombok.Value;

@Value
@Builder
public class CancelOrderCommand {
    String orderId;
    String customerId;
}===== ./domain/src/main/java/com/ing/order/command/ListOrdersCommand.java =====
package com.ing.order.command;

import lombok.Builder;
import lombok.Value;

import java.time.LocalDateTime;

@Value
@Builder
public class ListOrdersCommand {
    String customerId;
    LocalDateTime startDate;
    LocalDateTime endDate;
}===== ./domain/src/main/java/com/ing/order/port/OrderPort.java =====
package com.ing.order.port;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import com.ing.order.model.Order;

public interface OrderPort {

    Order save(Order order);

    Optional<Order> findById(String id);

    List<Order> findByCustomerIdAndDateRange(String customerId, LocalDateTime startDate, LocalDateTime endDate);

    void deleteById(String id);

}===== ./domain/src/main/java/com/ing/asset/handler/ListAssetsHandler.java =====
package com.ing.asset.handler;

import com.ing.asset.command.ListAssetsCommand;
import com.ing.asset.model.Asset;
import com.ing.asset.port.AssetPort;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.util.List;

@Slf4j
@RequiredArgsConstructor
public class ListAssetsHandler {

    private final AssetPort assetRepository;

    public List<Asset> handle(ListAssetsCommand command) {
        List<Asset> assets = assetRepository.findAllByCustomerId(command.getCustomerId());

        log.info("Retrieved {} assets for customer {}", assets.size(), command.getCustomerId());

        return assets;
    }
}===== ./domain/src/main/java/com/ing/asset/handler/WithdrawMoneyHandler.java =====
package com.ing.asset.handler;

import com.ing.asset.model.Asset;
import com.ing.asset.port.AssetPort;
import com.ing.asset.command.WithdrawMoneyCommand;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
public class WithdrawMoneyHandler {

    private final AssetPort assetRepository;

    public void handle(WithdrawMoneyCommand command) {
        Asset tryAsset = assetRepository.findByCustomerIdAndAssetName(command.getCustomerId(), "TRY")
            .orElseThrow(() -> new IllegalArgumentException("No TRY asset found for customer"));

        if (tryAsset.getUsableSize().compareTo(command.getAmount()) < 0) {
            throw new IllegalArgumentException("Insufficient funds");
        }

        tryAsset.decrementSize(command.getAmount());
        assetRepository.save(tryAsset);

        log.info(
            "Withdrawn {} TRY for customer {} to IBAN {}",
            command.getAmount(),
            command.getCustomerId(),
            command.getIban()
        );
    }

}===== ./domain/src/main/java/com/ing/asset/handler/DepositMoneyHandler.java =====
package com.ing.asset.handler;

import com.ing.asset.model.Asset;
import com.ing.asset.port.AssetPort;
import com.ing.asset.command.DepositMoneyCommand;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
public class DepositMoneyHandler {

    private final AssetPort assetRepository;

    public void handle(DepositMoneyCommand command) {

        Asset tryAsset = assetRepository.findByCustomerIdAndAssetName(command.getCustomerId(), "TRY")
            .orElse(new Asset(command.getCustomerId(), "TRY", command.getAmount(), command.getAmount()));

        tryAsset.incrementSize(command.getAmount());
        assetRepository.save(tryAsset);

        log.info("Deposited {} TRY for customer {}", command.getAmount(), command.getCustomerId());
    }

}===== ./domain/src/main/java/com/ing/asset/model/Asset.java =====
package com.ing.asset.model;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

import java.math.BigDecimal;

@Getter
@AllArgsConstructor
public class Asset {

    private final String customerId;
    private final String assetName;
    @Setter
    private BigDecimal size;
    @Setter
    private BigDecimal usableSize;

    public void incrementSize(BigDecimal amount) {
        this.size = this.size.add(amount);
        this.usableSize = this.usableSize.add(amount);
    }

    public void decrementSize(BigDecimal amount) {
        if (this.usableSize.compareTo(amount) < 0) {
            throw new IllegalArgumentException("Insufficient usable size");
        }

        this.size = this.size.subtract(amount);
        this.usableSize = this.usableSize.subtract(amount);
    }
}===== ./domain/src/main/java/com/ing/asset/command/ListAssetsCommand.java =====
package com.ing.asset.command;

import lombok.Value;
import lombok.Builder;

@Value
@Builder
public class ListAssetsCommand {
    String customerId;
}===== ./domain/src/main/java/com/ing/asset/command/DepositMoneyCommand.java =====
package com.ing.asset.command;

import lombok.Builder;
import lombok.Value;

import java.math.BigDecimal;

@Value
@Builder
public class DepositMoneyCommand {
    String customerId;
    BigDecimal amount;
}===== ./domain/src/main/java/com/ing/asset/command/WithdrawMoneyCommand.java =====
package com.ing.asset.command;

import lombok.Builder;
import lombok.Value;

import java.math.BigDecimal;

@Value
@Builder
public class WithdrawMoneyCommand {
    String customerId;
    BigDecimal amount;
    String iban;
}===== ./domain/src/main/java/com/ing/asset/port/AssetPort.java =====
package com.ing.asset.port;

import java.util.List;
import java.util.Optional;

import com.ing.asset.model.Asset;

public interface AssetPort {

    Asset save(Asset asset);

    Optional<Asset> findByCustomerIdAndAssetName(String customerId, String assetName);

    List<Asset> findAllByCustomerId(String customerId);

}===== ./domain/src/main/java/com/ing/user/model/User.java =====
package com.ing.user.model;

import lombok.Value;

@Value
public class User {
    String id;
    String username;
    String password;
    UserType userType;

    public enum UserType {
        CUSTOMER, ADMIN
    }
}===== ./domain/src/main/java/com/ing/user/port/UserPort.java =====
package com.ing.user.port;

import com.ing.user.model.User;

import java.util.Optional;

public interface UserPort {

    Optional<User> findById(String id);

    Optional<User> findByUsername(String username);

    User save(User user);

}===== ./domain/src/main/java/com/ing/common/model/Command.java =====
package com.ing.common.model;

public interface Command {
}
